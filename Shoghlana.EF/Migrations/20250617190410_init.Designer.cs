// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shoghlana.EF;

#nullable disable

namespace Shoghlana.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250617190410_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "77b5a044-5c9e-495e-8442-76a816c17a66",
                            ConcurrencyStamp = "89dfb7b5-d529-40d9-92f6-808adb869512",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "82841029-737c-4234-9b74-64e448755ee4",
                            ConcurrencyStamp = "4535993f-2b05-49a0-a746-f2b830671da5",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "8f072cb2-2b03-4fb0-b15a-e2168fdb5f48",
                            ConcurrencyStamp = "811a2238-0931-40ba-aedf-129fb1c8a22d",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique()
                        .HasFilter("[AdminId] IS NOT NULL");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("FreelancerId")
                        .IsUnique()
                        .HasFilter("[FreelancerId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Includes all services related to graphic design, industrial design, and web design.",
                            Title = "Design Services"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Includes development and programming of applications and software for various systems and devices.",
                            Title = "Software Services"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Includes article writing, instant translation, and content creation for websites and blogs.",
                            Title = "Writing and Translation Services"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Includes managing digital marketing campaigns, social media advertising, and market analytics.",
                            Title = "Digital Marketing Services"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Includes user support, troubleshooting technical issues, and enhancing system and network performance.",
                            Title = "Technical Support Services"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Includes providing training courses, designing educational curricula, and developing learning resources.",
                            Title = "Education and Training Services"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegisterationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Saudi Arabia",
                            Description = "A programmer and application developer specialized in web development.",
                            Name = "Abdulrahman Ahmed",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Country = "Egypt",
                            Description = "A professional graphic designer specializing in logo and poster design.",
                            Name = "Fatima Mohammed",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Country = "United Arab Emirates",
                            Description = "A professional digital marketer with experience in managing social media ad campaigns.",
                            Name = "Ali Alabdullah",
                            Phone = "+971123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Country = "Jordan",
                            Description = "A content writer specialized in creative writing and artistic articles.",
                            Name = "Maryam Hassan",
                            Phone = "+962123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Country = "Iraq",
                            Description = "A photographer specializing in event and special occasion photography.",
                            Name = "Yousef Khalid",
                            Phone = "+964123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Country = "Saudi Arabia",
                            Description = "A professional project manager in tech and software development.",
                            Name = "Lama Abdullah",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Country = "Egypt",
                            Description = "A creative content marketer working on promoting digital content for startups.",
                            Name = "Omar Ahmed",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Country = "Lebanon",
                            Description = "A professional app developer working in mobile app development.",
                            Name = "Rana Mahmoud",
                            Phone = "+961123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Country = "Jordan",
                            Description = "A marketing manager specialized in digital marketing strategies.",
                            Name = "Ahmed Ali",
                            Phone = "+962123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Country = "Saudi Arabia",
                            Description = "An expert in designing and managing websites for small and medium businesses.",
                            Name = "Huda Saleh",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Country = "United Arab Emirates",
                            Description = "A professional financial accountant working in financial reporting.",
                            Name = "Salma Abdullah",
                            Phone = "+971123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Country = "Egypt",
                            Description = "An architect specialized in residential building design.",
                            Name = "Mohammed Hassan",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Country = "Iraq",
                            Description = "A doctor specialized in pediatrics and mental health.",
                            Name = "Zainab Abdullah",
                            Phone = "+964123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Country = "Lebanon",
                            Description = "A creative graphic designer working in commercial ad design.",
                            Name = "Ahmed Hussein",
                            Phone = "+961123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Country = "Jordan",
                            Description = "A professional translator specializing in medical and scientific text translation.",
                            Name = "Fatima Ali",
                            Phone = "+962123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            Country = "Saudi Arabia",
                            Description = "A professional web developer in electronic application development.",
                            Name = "Abdullah Mahmoud",
                            Phone = "+966123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            Country = "Egypt",
                            Description = "An architectural engineer specialized in industrial facility design.",
                            Name = "Reem Abdullah",
                            Phone = "+201234567890",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            Country = "Lebanon",
                            Description = "A financial accountant with extensive experience in financial accounting.",
                            Name = "Omar Hassan",
                            Phone = "+961123456789",
                            RegisterationTime = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ClientNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientNotifications");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Overview")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("PersonalImageBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Freelancers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cairo, Egypt",
                            Name = "Mohamed Ahmed",
                            Overview = "A professional developer with experience in web and mobile application development.",
                            Title = "Specialized Application Developer"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Riyadh, Saudi Arabia",
                            Name = "Fatima Ali",
                            Overview = "A highly experienced designer in logo and poster design.",
                            Title = "Professional Graphic Designer"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Cairo, Egypt",
                            Name = "Ahmed Khaled",
                            Overview = "A programmer with experience in developing advanced applications using AI technologies.",
                            Title = "AI Specialist Programmer"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Dubai, United Arab Emirates",
                            Name = "Sarah Hussein",
                            Overview = "A graphic designer with experience in abstract design and creative arts.",
                            Title = "Creative Abstract Designer"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Alexandria, Egypt",
                            Name = "Abdulrahman Mahmoud",
                            Overview = "A professional developer with experience in building and developing large and complex websites.",
                            Title = "Advanced Web Developer"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Jeddah, Saudi Arabia",
                            Name = "Rima Abdullah",
                            Overview = "A graphic designer with extensive experience in logo and brand identity design.",
                            Title = "Professional Graphic Designer"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Cairo, Egypt",
                            Name = "Mahmoud Ali",
                            Overview = "A specialized developer with experience in mobile application development using the latest technologies.",
                            Title = "Mobile App Developer"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Riyadh, Saudi Arabia",
                            Name = "Noor Abdullah",
                            Overview = "A developer with experience in advanced web and mobile application development.",
                            Title = "Professional App Developer"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Alexandria, Egypt",
                            Name = "Layla Mohammed",
                            Overview = "A graphic designer and artist with experience in illustration and fine arts design.",
                            Title = "Creative Graphic Designer and Artist"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Manama, Bahrain",
                            Name = "Ali Al-Husseini",
                            Overview = "A developer with experience in web and mobile application development using multiple languages.",
                            Title = "Electronic Application Developer"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerNotifications");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "FreelancerId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerSkills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcceptedFreelancerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApproveTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedFreelancerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClientId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptedFreelancerId = 1,
                            CategoryId = 1,
                            ClientId = 1,
                            Description = "Professional design and artistic work",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 500m,
                            MinBudget = 100m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Professional and Unique Logo Design"
                        },
                        new
                        {
                            Id = 2,
                            AcceptedFreelancerId = 2,
                            CategoryId = 1,
                            ClientId = 2,
                            Description = "Design and administrative artwork",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 700m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Social Media Advertising Poster Design"
                        },
                        new
                        {
                            Id = 3,
                            AcceptedFreelancerId = 3,
                            CategoryId = 1,
                            ClientId = 3,
                            Description = "Business card design",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 600m,
                            MinBudget = 150m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Professional Business Card Design for Printing"
                        },
                        new
                        {
                            Id = 4,
                            AcceptedFreelancerId = 4,
                            CategoryId = 2,
                            ClientId = 4,
                            Description = "Website and application development",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 800m,
                            MinBudget = 300m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Lifetime Free Control Panel Installation"
                        },
                        new
                        {
                            Id = 5,
                            AcceptedFreelancerId = 5,
                            CategoryId = 3,
                            ClientId = 5,
                            Description = "Website programming",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 700m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Company Profile Website Design"
                        },
                        new
                        {
                            Id = 6,
                            AcceptedFreelancerId = 6,
                            CategoryId = 4,
                            ClientId = 6,
                            Description = "Programming and design of mobile apps",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 3000m,
                            MinBudget = 1000m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Mobile App Development for iOS and Android"
                        },
                        new
                        {
                            Id = 7,
                            AcceptedFreelancerId = 7,
                            CategoryId = 3,
                            ClientId = 7,
                            Description = "Programming and design of online shopping websites",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1500m,
                            MinBudget = 500m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 2,
                            Title = "E-Commerce Website Design and Development"
                        },
                        new
                        {
                            Id = 8,
                            AcceptedFreelancerId = 8,
                            CategoryId = 5,
                            ClientId = 8,
                            Description = "Marketing and advertising for companies and individuals",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 1000m,
                            MinBudget = 300m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 2,
                            Title = "Social Media Advertising Campaign Management"
                        },
                        new
                        {
                            Id = 9,
                            AcceptedFreelancerId = 9,
                            CategoryId = 6,
                            ClientId = 9,
                            Description = "Illustration and drawing arts",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 600m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 2,
                            Title = "Illustration Design for Children's Books"
                        },
                        new
                        {
                            Id = 10,
                            AcceptedFreelancerId = 10,
                            CategoryId = 1,
                            ClientId = 10,
                            Description = "Marketing and advertising content writing",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 300m,
                            MinBudget = 100m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 2,
                            Title = "Advertising Content Writing for Website"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            ClientId = 11,
                            Description = "Advanced administrative systems programming",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 2000m,
                            MinBudget = 500m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Employee Management System Design and Programming"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            ClientId = 12,
                            Description = "Economic and financial analysis",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 5000m,
                            MinBudget = 1000m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Feasibility Study for Future Business Project"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            ClientId = 13,
                            Description = "Educational and training courses",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 200m,
                            MinBudget = 50m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Online Programming Lessons for Beginners"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            ClientId = 14,
                            Description = "Graphic design and advertising",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 500m,
                            MinBudget = 150m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Promotional Print Design for Cultural Event"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 6,
                            ClientId = 15,
                            Description = "Translation and writing",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 800m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Translation of Scientific Articles from English to Arabic"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            ClientId = 16,
                            Description = "Video game programming",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 5000m,
                            MinBudget = 1000m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Mobile Video Game Design and Development"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            ClientId = 17,
                            Description = "Design and development of e-learning platforms",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1500m,
                            MinBudget = 500m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Online Educational Platform Design"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            ClientId = 18,
                            Description = "Content writing and editing",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 700m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Content Management for Tech Blog"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            ClientId = 1,
                            Description = "CRM system programming and customization",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 2500m,
                            MinBudget = 800m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "CRM System Design and Development"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            ClientId = 2,
                            Description = "Data analysis and report preparation",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1000m,
                            MinBudget = 300m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Data Analysis and Strategic Report Preparation for Companies"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            ClientId = 3,
                            Description = "Educational and research content writing",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 1500m,
                            MinBudget = 500m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Writing and Editing E-Books on AI"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            ClientId = 4,
                            Description = "Programming and design of educational websites",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1200m,
                            MinBudget = 400m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Educational Website Design and Development for Students"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            ClientId = 5,
                            Description = "Design and programming of booking apps",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1800m,
                            MinBudget = 600m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Online Event Booking Platform Design and Programming"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 3,
                            ClientId = 6,
                            Description = "Improving website search engine performance",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 800m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Website Search Engine Optimization (SEO)"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 4,
                            ClientId = 7,
                            Description = "Integrated management systems programming",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 2500m,
                            MinBudget = 700m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Inventory and Sales Management System for Small Businesses"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 5,
                            ClientId = 8,
                            Description = "Economic and financial analysis for real estate projects",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 5000m,
                            MinBudget = 1500m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Feasibility Study for a New Residential Project"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 6,
                            ClientId = 9,
                            Description = "Personal assistant app programming",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 3000m,
                            MinBudget = 800m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Online Personal Assistant App Design and Development"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            ClientId = 10,
                            Description = "Marketing and fundraising",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1500m,
                            MinBudget = 400m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Create and Manage Online Fundraising Campaign"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 2,
                            ClientId = 11,
                            Description = "Design and programming of interactive educational platforms",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 2000m,
                            MinBudget = 600m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Interactive Educational Platform for Teaching Mathematics"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 3,
                            ClientId = 12,
                            Description = "Educational game programming and design",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 1200m,
                            MinBudget = 300m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Educational Video Game Design for Children"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 4,
                            ClientId = 13,
                            Description = "Policy analysis and report preparation",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 700m,
                            MinBudget = 200m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 1,
                            Title = "Research Report on Public Policy"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 5,
                            ClientId = 14,
                            Description = "Content management systems programming and customization",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1500m,
                            MinBudget = 400m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Blog Content Management System Design and Programming"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 6,
                            ClientId = 15,
                            Description = "Product marketing and advertising",
                            DurationInDays = 0,
                            ExperienceLevel = 0,
                            MaxBudget = 1000m,
                            MinBudget = 300m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Marketing Campaign for a New Product"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 1,
                            ClientId = 16,
                            Description = "Project management system programming",
                            DurationInDays = 0,
                            ExperienceLevel = 2,
                            MaxBudget = 2500m,
                            MinBudget = 600m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Engineering Project Management System Design and Programming"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 2,
                            ClientId = 17,
                            Description = "Educational apps programming and design",
                            DurationInDays = 0,
                            ExperienceLevel = 1,
                            MaxBudget = 1800m,
                            MinBudget = 500m,
                            PostTime = new DateTime(2025, 6, 8, 22, 9, 59, 384, DateTimeKind.Local).AddTicks(615),
                            Status = 0,
                            Title = "Programming Language Learning App Design and Development"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.JobSkills", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillId1")
                        .HasColumnType("int");

                    b.HasKey("JobId", "SkillId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillId1");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("Poster")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("TimePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Project1",
                            FreelancerId = 1,
                            Poster = new byte[] { 32, 33, 34, 35 },
                            TimePublished = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Project2",
                            FreelancerId = 2,
                            Poster = new byte[] { 32, 33, 34, 35 },
                            TimePublished = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project2"
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = new byte[] { 32, 33, 34, 35 }
                        },
                        new
                        {
                            Id = 2,
                            Image = new byte[] { 32, 33, 34, 35 }
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectSkills", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.PrimitiveCollection<string>("ReposLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("Proposals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 0.0,
                            FreelancerId = 1,
                            JobId = 1,
                            Price = 300m,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 0.0,
                            FreelancerId = 2,
                            JobId = 2,
                            Price = 400m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProposalImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalImages");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasFilter("[JobId] IS NOT NULL");

                    b.ToTable("Rates", t =>
                        {
                            t.HasCheckConstraint("CK_VALUE_RANGE", "[Value] BETWEEN 1 AND 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JobId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            JobId = 2,
                            Value = 5
                        });
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Graphic Design"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Industrial Drawing"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Web Design"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Brand Identity Design"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Product Design"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Logo Design"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Mobile App Development"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Web Development"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Game Development"
                        },
                        new
                        {
                            Id = 10,
                            Title = "Computer Programming"
                        },
                        new
                        {
                            Id = 11,
                            Title = "Content Writing"
                        },
                        new
                        {
                            Id = 12,
                            Title = "Article Writing"
                        },
                        new
                        {
                            Id = 13,
                            Title = "Translation"
                        },
                        new
                        {
                            Id = 14,
                            Title = "Proofreading"
                        },
                        new
                        {
                            Id = 15,
                            Title = "Technical Writing"
                        },
                        new
                        {
                            Id = 16,
                            Title = "Digital Marketing"
                        },
                        new
                        {
                            Id = 17,
                            Title = "Search Engine Optimization (SEO)"
                        },
                        new
                        {
                            Id = 18,
                            Title = "Social Media Advertising"
                        },
                        new
                        {
                            Id = 19,
                            Title = "Email Marketing"
                        },
                        new
                        {
                            Id = 20,
                            Title = "Content Marketing"
                        },
                        new
                        {
                            Id = 21,
                            Title = "Technical Support"
                        },
                        new
                        {
                            Id = 22,
                            Title = "Network Administration"
                        },
                        new
                        {
                            Id = 23,
                            Title = "System Maintenance"
                        },
                        new
                        {
                            Id = 24,
                            Title = "Desktop Support"
                        },
                        new
                        {
                            Id = 25,
                            Title = "Cloud Computing Services"
                        },
                        new
                        {
                            Id = 26,
                            Title = "Educational Software Development"
                        },
                        new
                        {
                            Id = 27,
                            Title = "Curriculum Design"
                        },
                        new
                        {
                            Id = 28,
                            Title = "E-Learning Development"
                        },
                        new
                        {
                            Id = 29,
                            Title = "Lesson Design"
                        },
                        new
                        {
                            Id = 30,
                            Title = "Online Teaching"
                        },
                        new
                        {
                            Id = 31,
                            Title = "Advertisement Design"
                        },
                        new
                        {
                            Id = 32,
                            Title = "User Interface (UI) Design"
                        },
                        new
                        {
                            Id = 33,
                            Title = "User Experience (UX)"
                        },
                        new
                        {
                            Id = 34,
                            Title = "3D Modeling"
                        },
                        new
                        {
                            Id = 35,
                            Title = "Character Design"
                        },
                        new
                        {
                            Id = 36,
                            Title = "App Development with React.js"
                        },
                        new
                        {
                            Id = 37,
                            Title = "App Development with Node.js"
                        },
                        new
                        {
                            Id = 38,
                            Title = "App Development with Ruby on Rails"
                        },
                        new
                        {
                            Id = 39,
                            Title = "App Development with SQL"
                        },
                        new
                        {
                            Id = 40,
                            Title = "App Development with Django"
                        },
                        new
                        {
                            Id = 41,
                            Title = "Legal Article Writing"
                        },
                        new
                        {
                            Id = 42,
                            Title = "Creative Writing"
                        },
                        new
                        {
                            Id = 43,
                            Title = "Legal Verification"
                        },
                        new
                        {
                            Id = 44,
                            Title = "Localization"
                        },
                        new
                        {
                            Id = 45,
                            Title = "Market Analysis"
                        },
                        new
                        {
                            Id = 46,
                            Title = "Statistical Analysis"
                        },
                        new
                        {
                            Id = 47,
                            Title = "Performance Marketing"
                        },
                        new
                        {
                            Id = 48,
                            Title = "Affiliate Marketing"
                        },
                        new
                        {
                            Id = 49,
                            Title = "Online Marketing"
                        },
                        new
                        {
                            Id = 50,
                            Title = "Ad Campaign Management"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Admin", "Admin")
                        .WithOne("User")
                        .HasForeignKey("Shoghlana.Core.Models.ApplicationUser", "AdminId");

                    b.HasOne("Shoghlana.Core.Models.Client", "Client")
                        .WithOne("User")
                        .HasForeignKey("Shoghlana.Core.Models.ApplicationUser", "ClientId");

                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithOne("User")
                        .HasForeignKey("Shoghlana.Core.Models.ApplicationUser", "FreelancerId");

                    b.OwnsMany("Shoghlana.Core.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Admin");

                    b.Navigation("Client");

                    b.Navigation("Freelancer");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ClientNotification", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerNotification", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Notifications")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.FreelancerSkills", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Skills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Skill", "Skill")
                        .WithMany("Freelancers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Job", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "AcceptedFreelancer")
                        .WithMany("WorkingHistory")
                        .HasForeignKey("AcceptedFreelancerId");

                    b.HasOne("Shoghlana.Core.Models.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedFreelancer");

                    b.Navigation("Category");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.JobSkills", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Job", "Job")
                        .WithMany("Skills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Skill", null)
                        .WithMany("Jobs")
                        .HasForeignKey("SkillId1");

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Project", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Portfolio")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectImages", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProjectSkills", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Project", "Project")
                        .WithMany("Skills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Skill", "Skill")
                        .WithMany("Projects")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Proposal", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Freelancer", "Freelancer")
                        .WithMany("Proposals")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoghlana.Core.Models.Job", "Job")
                        .WithMany("Proposals")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.ProposalImages", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Proposal", "Proposal")
                        .WithMany("Images")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Rate", b =>
                {
                    b.HasOne("Shoghlana.Core.Models.Job", "Job")
                        .WithOne("Rate")
                        .HasForeignKey("Shoghlana.Core.Models.Rate", "JobId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Admin", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Client", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Notifications");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Freelancer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Portfolio");

                    b.Navigation("Proposals");

                    b.Navigation("Skills");

                    b.Navigation("User");

                    b.Navigation("WorkingHistory");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Job", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("Rate");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Proposal", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Shoghlana.Core.Models.Skill", b =>
                {
                    b.Navigation("Freelancers");

                    b.Navigation("Jobs");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
